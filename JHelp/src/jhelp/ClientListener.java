/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jhelp;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.TextEvent;
import java.awt.event.TextListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Class defines a process for all events what happens in client form.
 *
 * @author <strong >Y.D.Zakovryashin</strong>, 2009
 * @version 1.0
 */
public class ClientListener extends WindowAdapter
        implements ActionListener, KeyListener, TextListener {

    Socket socket;
    private Client client;
    private ObjectOutputStream oos;
    private ObjectInputStream ois;

    /**
     * Single constructor of the class.
     *
     * @param client references to client form
     */
    public ClientListener(Client client) {
        this.client = client;
    }

    @Override
    public void windowClosing(WindowEvent e) {
        disconnect();
    }

    /**
     * Method for processing of {@link java.awt.event.ActionEvent} events.
     *
     * @param e reference to {@link java.awt.event.ActionEvent} event what
     * happens
     * @see java.awt.event.ActionEvent
     * @see java.awt.event.ActionListener
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        client.buttonAction(e);
    }

    /**
     * Method for processing of {@link java.awt.event.KeyEvent} event. The
     * method invokes in case a user pushes any keyboard button with typed
     * symbol.
     *
     * @param e reference to {@link java.awt.event.KeyEvent} event what happens
     * @see java.awt.event.KeyEvent
     * @see java.awt.event.KeyListener
     */
    @Override
    public void keyTyped(KeyEvent e) {
    }

    /**
     * Method for processing of {@link java.awt.event.KeyEvent} event. The
     * method invokes in case a user pushes but not releases any keyboard
     * button.
     *
     * @param e reference to {@link java.awt.event.KeyEvent} event what happens
     * @see java.awt.event.KeyEvent
     * @see java.awt.event.KeyListener
     */
    @Override
    public void keyPressed(KeyEvent e) {
    }

    /**
     * Method for processing of {@link java.awt.event.KeyEvent} event. The
     * method invokes in case a user releases any keyboard button.
     *
     * @param e reference to {@link java.awt.event.KeyEvent} event what happens
     * @see java.awt.event.KeyEvent
     * @see java.awt.event.KeyListener
     */
    @Override
    public void keyReleased(KeyEvent e) {
        client.termAction(e);
    }

    /**
     * This method are invoked when an object's text changed. This high-level
     * event is generated by an object (such as a TextComponent) when its text
     * changes.
     *
     * @param e reference to {@link java.awt.event.TextEvent} event what happens
     * @see java.awt.event.TextEvent
     * @see java.awt.event.TextListener
     */
    @Override
    public void textValueChanged(TextEvent e) {
    }

    int connect(String host, int port) {
        int flag = JHelp.OK;
        try {
            socket = new Socket(host, port);
            oos = new ObjectOutputStream(socket.getOutputStream());
            ois = new ObjectInputStream(socket.getInputStream());
        } catch (IOException ex) {
            flag = JHelp.ERROR;
            disconnect();
            client.showMessage(ex);
        } finally {
            return flag;
        }
    }

    int disconnect() {
        int flag = JHelp.OK;
        if (socket != null && socket.isClosed()) {
            return flag;
        }
        Data disconnect = new Data();
        disconnect.setOperation(JHelp.DISCONNECT);
        try {            
            oos.writeObject(disconnect);
            socket.close();
        } catch (IOException ex) {
            flag = JHelp.ERROR;
            socket.close();
            client.showMessage(ex);
        } finally {             
            return flag;
        }
    }

    public Data getData(Data data) {
        Data newData = null;
        System.out.println("ClientListener: getData");
        try {
            oos.writeObject(data);
            newData = (Data) ois.readObject();
            if (newData.getOperation() == JHelp.DISCONNECT) {
                throw new IOException("ServerDB disconnected");
            }
        } catch (IOException | ClassNotFoundException ex) {
            disconnect();
            newData = data;
            client.showMessage(ex);
        } finally {
            return newData;
        }
    }

    public boolean checkConnection() {
        return socket != null;

    }
}
